//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.5.1.0 (NJsonSchema v9.4.10.0) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace Janitra.Bot.Api
{
#pragma warning disable // Disable all warnings

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "11.5.1.0")]
	public partial interface IClient
	{
		/// <summary>Get the list of all Citra Builds.</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<JsonCitraBuild>> CitraBuildsListGetAsync(bool? includeInactive = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

		/// <summary>Add a Citra Build</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		System.Threading.Tasks.Task CitraBuildsAddPostAsync(NewCitraBuild newBuild = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

		/// <summary>Get the list of all Janitra Bots in the system</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<JsonJanitraBot>> JanitraBotsListGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

		/// <summary>Add a new Janitra Bot</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		System.Threading.Tasks.Task<AddBotResult> JanitraBotsAddPostAsync(NewJanitraBot botDetails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

		/// <summary>Begin an OAuth authentication with github</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		System.Threading.Tasks.Task OauthGithubGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

		/// <summary>Finish an OAuth authentication with github. Redirects you to a URL including your JWT (for authentication)</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		System.Threading.Tasks.Task OauthGithubCallbackGetAsync(string code = null, string state = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

		/// <summary>Returns the authenticated users details if authenticated</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		System.Threading.Tasks.Task<VerifyAuthResult> OauthVerifyAuthGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<JsonTestDefinition>> TestDefinitionsListGetAsync(bool? includeInactive = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		System.Threading.Tasks.Task<AddTestResult> TestDefinitionsAddPostAsync(string testName = null, byte[] movieBytes = null, string notes = null, int? testRomId = null, RomType? newTestRom_RomType = null, string newTestRom_Name = null, string newTestRom_FileName = null, byte[] newTestRom_RomBytes = null, string newTestRom_CodeUrl = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

		/// <summary>Get all of the test results for the given Build, TestDefinition, JanitraBot. Ordered by TestDefinitionId, JanitraBotId</summary>
		/// <param name="citraBuildId">What CitraBuild to fetch TestResults for</param>
		/// <param name="testDefinitionId">What TestDefinintion to fetch TestResults for</param>
		/// <param name="janitraBotId">What JanitraBot to fetch TestResults for</param>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<JsonTestResult>> TestResultsListGetAsync(int? citraBuildId = null, int? testDefinitionId = null, int? janitraBotId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

		/// <summary>Submit a test result</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		System.Threading.Tasks.Task TestResultsAddPostAsync(NewTestResult testResult = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "11.5.1.0")]
	public partial class Client : IClient
	{
		private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
		private string _baseUrl = "";

		public Client(string baseUrl)
		{
			BaseUrl = baseUrl;
			_settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
			{
				var settings = new Newtonsoft.Json.JsonSerializerSettings();
				UpdateJsonSerializerSettings(settings);
				return settings;
			});
		}

		public string BaseUrl
		{
			get { return _baseUrl; }
			set { _baseUrl = value; }
		}

		partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
		partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
		partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

		/// <summary>Get the list of all Citra Builds.</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<JsonCitraBuild>> CitraBuildsListGetAsync(bool? includeInactive = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl).Append("/citra-builds/list?");
			if (includeInactive != null) urlBuilder_.Append("includeInactive=").Append(System.Uri.EscapeDataString(System.Convert.ToString(includeInactive.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<JsonCitraBuild>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<JsonCitraBuild>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception)
							{
								throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
						}

						return default(System.Collections.ObjectModel.ObservableCollection<JsonCitraBuild>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>Add a Citra Build</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task CitraBuildsAddPostAsync(NewCitraBuild newBuild = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl).Append("/citra-builds/add");

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(newBuild, _settings.Value));
					content_.Headers.ContentType.MediaType = "application/json";
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>Get the list of all Janitra Bots in the system</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<JsonJanitraBot>> JanitraBotsListGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl).Append("/janitra-bots/list");

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<JsonJanitraBot>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<JsonJanitraBot>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception)
							{
								throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
						}

						return default(System.Collections.ObjectModel.ObservableCollection<JsonJanitraBot>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>Add a new Janitra Bot</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<AddBotResult> JanitraBotsAddPostAsync(NewJanitraBot botDetails = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl).Append("/janitra-bots/add");

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(botDetails, _settings.Value));
					content_.Headers.ContentType.MediaType = "application/json";
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(AddBotResult);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<AddBotResult>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception)
							{
								throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
						}

						return default(AddBotResult);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>Begin an OAuth authentication with github</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task OauthGithubGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl).Append("/oauth/github");

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "302")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("Redirect", status_, responseData_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>Finish an OAuth authentication with github. Redirects you to a URL including your JWT (for authentication)</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task OauthGithubCallbackGetAsync(string code = null, string state = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl).Append("/oauth/github/callback?");
			if (code != null) urlBuilder_.Append("code=").Append(System.Uri.EscapeDataString(System.Convert.ToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (state != null) urlBuilder_.Append("state=").Append(System.Uri.EscapeDataString(System.Convert.ToString(state, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "302")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("Redirect", status_, responseData_, headers_, null);
						}
						else
						if (status_ == "403")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("Forbidden", status_, responseData_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>Returns the authenticated users details if authenticated</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<VerifyAuthResult> OauthVerifyAuthGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl).Append("/oauth/verify-auth");

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(VerifyAuthResult);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<VerifyAuthResult>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception)
							{
								throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
							}
						}
						else
						if (status_ == "401")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("Unauthorized", status_, responseData_, headers_, null);
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
						}

						return default(VerifyAuthResult);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<JsonTestDefinition>> TestDefinitionsListGetAsync(bool? includeInactive = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl).Append("/test-definitions/list?");
			if (includeInactive != null) urlBuilder_.Append("includeInactive=").Append(System.Uri.EscapeDataString(System.Convert.ToString(includeInactive.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<JsonTestDefinition>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<JsonTestDefinition>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception)
							{
								throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
						}

						return default(System.Collections.ObjectModel.ObservableCollection<JsonTestDefinition>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<AddTestResult> TestDefinitionsAddPostAsync(string testName = null, byte[] movieBytes = null, string notes = null, int? testRomId = null, RomType? newTestRom_RomType = null, string newTestRom_Name = null, string newTestRom_FileName = null, byte[] newTestRom_RomBytes = null, string newTestRom_CodeUrl = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl).Append("/test-definitions/add?");
			if (testName != null) urlBuilder_.Append("TestName=").Append(System.Uri.EscapeDataString(System.Convert.ToString(testName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (movieBytes != null) urlBuilder_.Append("MovieBytes=").Append(System.Uri.EscapeDataString(System.Convert.ToString(movieBytes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (notes != null) urlBuilder_.Append("Notes=").Append(System.Uri.EscapeDataString(System.Convert.ToString(notes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (testRomId != null) urlBuilder_.Append("TestRomId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(testRomId.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (newTestRom_RomType != null) urlBuilder_.Append("NewTestRom.RomType=").Append(System.Uri.EscapeDataString(System.Convert.ToString(newTestRom_RomType.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (newTestRom_Name != null) urlBuilder_.Append("NewTestRom.Name=").Append(System.Uri.EscapeDataString(System.Convert.ToString(newTestRom_Name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (newTestRom_FileName != null) urlBuilder_.Append("NewTestRom.FileName=").Append(System.Uri.EscapeDataString(System.Convert.ToString(newTestRom_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (newTestRom_RomBytes != null) urlBuilder_.Append("NewTestRom.RomBytes=").Append(System.Uri.EscapeDataString(System.Convert.ToString(newTestRom_RomBytes, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (newTestRom_CodeUrl != null) urlBuilder_.Append("NewTestRom.CodeUrl=").Append(System.Uri.EscapeDataString(System.Convert.ToString(newTestRom_CodeUrl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(string.Empty);
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(AddTestResult);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<AddTestResult>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception)
							{
								throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
						}

						return default(AddTestResult);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>Get all of the test results for the given Build, TestDefinition, JanitraBot. Ordered by TestDefinitionId, JanitraBotId</summary>
		/// <param name="citraBuildId">What CitraBuild to fetch TestResults for</param>
		/// <param name="testDefinitionId">What TestDefinintion to fetch TestResults for</param>
		/// <param name="janitraBotId">What JanitraBot to fetch TestResults for</param>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<JsonTestResult>> TestResultsListGetAsync(int? citraBuildId = null, int? testDefinitionId = null, int? janitraBotId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl).Append("/test-results/list?");
			if (citraBuildId != null) urlBuilder_.Append("citraBuildId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(citraBuildId.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (testDefinitionId != null) urlBuilder_.Append("testDefinitionId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(testDefinitionId.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			if (janitraBotId != null) urlBuilder_.Append("janitraBotId=").Append(System.Uri.EscapeDataString(System.Convert.ToString(janitraBotId.Value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
			urlBuilder_.Length--;

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					request_.Method = new System.Net.Http.HttpMethod("GET");
					request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							var result_ = default(System.Collections.ObjectModel.ObservableCollection<JsonTestResult>);
							try
							{
								result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<JsonTestResult>>(responseData_, _settings.Value);
								return result_;
							}
							catch (System.Exception exception)
							{
								throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception);
							}
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
						}

						return default(System.Collections.ObjectModel.ObservableCollection<JsonTestResult>);
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

		/// <summary>Submit a test result</summary>
		/// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
		/// <returns>Success</returns>
		/// <exception cref="SwaggerException">A server side error occurred.</exception>
		public async System.Threading.Tasks.Task TestResultsAddPostAsync(NewTestResult testResult = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
		{
			var urlBuilder_ = new System.Text.StringBuilder();
			urlBuilder_.Append(BaseUrl).Append("/test-results/add");

			var client_ = new System.Net.Http.HttpClient();
			try
			{
				using (var request_ = new System.Net.Http.HttpRequestMessage())
				{
					var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(testResult, _settings.Value));
					content_.Headers.ContentType.MediaType = "application/json";
					request_.Content = content_;
					request_.Method = new System.Net.Http.HttpMethod("POST");

					PrepareRequest(client_, request_, urlBuilder_);
					var url_ = urlBuilder_.ToString();
					request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
					PrepareRequest(client_, request_, url_);

					var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
					try
					{
						var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
						foreach (var item_ in response_.Content.Headers)
							headers_[item_.Key] = item_.Value;

						ProcessResponse(client_, response_);

						var status_ = ((int)response_.StatusCode).ToString();
						if (status_ == "200")
						{
							return;
						}
						else
						if (status_ != "200" && status_ != "204")
						{
							var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
							throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
						}
					}
					finally
					{
						if (response_ != null)
							response_.Dispose();
					}
				}
			}
			finally
			{
				if (client_ != null)
					client_.Dispose();
			}
		}

	}



	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public partial class JsonCitraBuild
	{
		[Newtonsoft.Json.JsonProperty("citraBuildId", Required = Newtonsoft.Json.Required.Always)]
		public int CitraBuildId { get; set; }

		[Newtonsoft.Json.JsonProperty("gitHash", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string GitHash { get; set; }

		[Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public JsonCitraBuildBuildType BuildType { get; set; }

		[Newtonsoft.Json.JsonProperty("buildNotes", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string BuildNotes { get; set; }

		[Newtonsoft.Json.JsonProperty("dateAdded", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.DateTimeOffset DateAdded { get; set; }

		[Newtonsoft.Json.JsonProperty("activelyTesting", Required = Newtonsoft.Json.Required.Always)]
		public bool ActivelyTesting { get; set; }

		[Newtonsoft.Json.JsonProperty("windowsUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string WindowsUrl { get; set; }

		[Newtonsoft.Json.JsonProperty("linuxUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string LinuxUrl { get; set; }

		[Newtonsoft.Json.JsonProperty("osxUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string OsxUrl { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static JsonCitraBuild FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonCitraBuild>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public partial class NewCitraBuild
	{
		[Newtonsoft.Json.JsonProperty("gitHash", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string GitHash { get; set; }

		[Newtonsoft.Json.JsonProperty("buildType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public NewCitraBuildBuildType BuildType { get; set; }

		[Newtonsoft.Json.JsonProperty("buildNotes", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string BuildNotes { get; set; }

		[Newtonsoft.Json.JsonProperty("windowsUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string WindowsUrl { get; set; }

		[Newtonsoft.Json.JsonProperty("linuxUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string LinuxUrl { get; set; }

		[Newtonsoft.Json.JsonProperty("osxUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string OsxUrl { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static NewCitraBuild FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<NewCitraBuild>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public partial class JsonJanitraBot
	{
		[Newtonsoft.Json.JsonProperty("janitraBotId", Required = Newtonsoft.Json.Required.Always)]
		public int JanitraBotId { get; set; }

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string Name { get; set; }

		[Newtonsoft.Json.JsonProperty("hardwareDetails", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string HardwareDetails { get; set; }

		[Newtonsoft.Json.JsonProperty("os", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public JsonJanitraBotOs Os { get; set; }

		[Newtonsoft.Json.JsonProperty("addedByUserId", Required = Newtonsoft.Json.Required.Always)]
		public int AddedByUserId { get; set; }

		[Newtonsoft.Json.JsonProperty("addedByUserName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string AddedByUserName { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static JsonJanitraBot FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonJanitraBot>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public partial class NewJanitraBot
	{
		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string Name { get; set; }

		[Newtonsoft.Json.JsonProperty("hardwareDetails", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string HardwareDetails { get; set; }

		[Newtonsoft.Json.JsonProperty("os", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public NewJanitraBotOs Os { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static NewJanitraBot FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<NewJanitraBot>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public partial class AddBotResult
	{
		[Newtonsoft.Json.JsonProperty("janitraBotId", Required = Newtonsoft.Json.Required.Always)]
		public int JanitraBotId { get; set; }

		[Newtonsoft.Json.JsonProperty("accessKey", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string AccessKey { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static AddBotResult FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<AddBotResult>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public partial class VerifyAuthResult
	{
		[Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.Always)]
		public int UserId { get; set; }

		[Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string Name { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static VerifyAuthResult FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<VerifyAuthResult>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public partial class JsonTestDefinition
	{
		[Newtonsoft.Json.JsonProperty("testDefinitionId", Required = Newtonsoft.Json.Required.Always)]
		public int TestDefinitionId { get; set; }

		[Newtonsoft.Json.JsonProperty("testName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string TestName { get; set; }

		/// <summary>Url the movie can be downloaded from</summary>
		[Newtonsoft.Json.JsonProperty("movieUrl", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string MovieUrl { get; set; }

		[Newtonsoft.Json.JsonProperty("movieSha256", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string MovieSha256 { get; set; }

		[Newtonsoft.Json.JsonProperty("activelyTesting", Required = Newtonsoft.Json.Required.Always)]
		public bool ActivelyTesting { get; set; }

		[Newtonsoft.Json.JsonProperty("addedAt", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.DateTimeOffset AddedAt { get; set; }

		[Newtonsoft.Json.JsonProperty("addedByUserId", Required = Newtonsoft.Json.Required.Always)]
		public int AddedByUserId { get; set; }

		[Newtonsoft.Json.JsonProperty("addedByUserName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string AddedByUserName { get; set; }

		[Newtonsoft.Json.JsonProperty("testRom", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public JsonTestRom TestRom { get; set; } = new JsonTestRom();

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static JsonTestDefinition FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonTestDefinition>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public partial class JsonTestRom
	{
		[Newtonsoft.Json.JsonProperty("testRomId", Required = Newtonsoft.Json.Required.Always)]
		public int TestRomId { get; set; }

		[Newtonsoft.Json.JsonProperty("romType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public JsonTestRomRomType RomType { get; set; }

		[Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string FileName { get; set; }

		[Newtonsoft.Json.JsonProperty("romUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string RomUrl { get; set; }

		[Newtonsoft.Json.JsonProperty("romSha256", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string RomSha256 { get; set; }

		[Newtonsoft.Json.JsonProperty("codeUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
		public string CodeUrl { get; set; }

		[Newtonsoft.Json.JsonProperty("addedByUserId", Required = Newtonsoft.Json.Required.Always)]
		public int AddedByUserId { get; set; }

		[Newtonsoft.Json.JsonProperty("addedByUserName", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string AddedByUserName { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static JsonTestRom FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonTestRom>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public partial class AddTestResult
	{
		[Newtonsoft.Json.JsonProperty("testDefinitionId", Required = Newtonsoft.Json.Required.Always)]
		public int TestDefinitionId { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static AddTestResult FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<AddTestResult>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public partial class JsonTestResult
	{
		[Newtonsoft.Json.JsonProperty("testResultId", Required = Newtonsoft.Json.Required.Always)]
		public int TestResultId { get; set; }

		[Newtonsoft.Json.JsonProperty("citraBuildId", Required = Newtonsoft.Json.Required.Always)]
		public int CitraBuildId { get; set; }

		[Newtonsoft.Json.JsonProperty("testDefinitionId", Required = Newtonsoft.Json.Required.Always)]
		public int TestDefinitionId { get; set; }

		[Newtonsoft.Json.JsonProperty("reportedAt", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public System.DateTimeOffset ReportedAt { get; set; }

		[Newtonsoft.Json.JsonProperty("logUrl", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string LogUrl { get; set; }

		[Newtonsoft.Json.JsonProperty("screenshotTopUrl", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string ScreenshotTopUrl { get; set; }

		[Newtonsoft.Json.JsonProperty("screenshotBottomUrl", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string ScreenshotBottomUrl { get; set; }

		[Newtonsoft.Json.JsonProperty("testResultType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public JsonTestResultTestResultType TestResultType { get; set; }

		[Newtonsoft.Json.JsonProperty("timeTakenSeconds", Required = Newtonsoft.Json.Required.Always)]
		public double TimeTakenSeconds { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static JsonTestResult FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonTestResult>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public partial class NewTestResult
	{
		/// <summary>JanitraBot Token</summary>
		[Newtonsoft.Json.JsonProperty("accessKey", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public string AccessKey { get; set; }

		[Newtonsoft.Json.JsonProperty("citraBuildId", Required = Newtonsoft.Json.Required.Always)]
		public int CitraBuildId { get; set; }

		[Newtonsoft.Json.JsonProperty("janitraBotId", Required = Newtonsoft.Json.Required.Always)]
		public int JanitraBotId { get; set; }

		[Newtonsoft.Json.JsonProperty("testDefinitionId", Required = Newtonsoft.Json.Required.Always)]
		public int TestDefinitionId { get; set; }

		[Newtonsoft.Json.JsonProperty("log", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public byte[] Log { get; set; }

		[Newtonsoft.Json.JsonProperty("screenshotTop", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public byte[] ScreenshotTop { get; set; }

		[Newtonsoft.Json.JsonProperty("screenshotBottom", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		public byte[] ScreenshotBottom { get; set; }

		[Newtonsoft.Json.JsonProperty("testResultType", Required = Newtonsoft.Json.Required.Always)]
		[System.ComponentModel.DataAnnotations.Required]
		[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
		public NewTestResultTestResultType TestResultType { get; set; }

		[Newtonsoft.Json.JsonProperty("timeTakenSeconds", Required = Newtonsoft.Json.Required.Always)]
		public double TimeTakenSeconds { get; set; }

		public string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this);
		}

		public static NewTestResult FromJson(string data)
		{
			return Newtonsoft.Json.JsonConvert.DeserializeObject<NewTestResult>(data);
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public enum RomType
	{
		[System.Runtime.Serialization.EnumMember(Value = "HardwareTest")]
		HardwareTest = 0,

		[System.Runtime.Serialization.EnumMember(Value = "HomebrewApp")]
		HomebrewApp = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public enum JsonCitraBuildBuildType
	{
		[System.Runtime.Serialization.EnumMember(Value = "Custom")]
		Custom = 0,

		[System.Runtime.Serialization.EnumMember(Value = "CitraMaster")]
		CitraMaster = 1,

		[System.Runtime.Serialization.EnumMember(Value = "CitraPullRequest")]
		CitraPullRequest = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public enum NewCitraBuildBuildType
	{
		[System.Runtime.Serialization.EnumMember(Value = "Custom")]
		Custom = 0,

		[System.Runtime.Serialization.EnumMember(Value = "CitraMaster")]
		CitraMaster = 1,

		[System.Runtime.Serialization.EnumMember(Value = "CitraPullRequest")]
		CitraPullRequest = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public enum JsonJanitraBotOs
	{
		[System.Runtime.Serialization.EnumMember(Value = "Windows")]
		Windows = 0,

		[System.Runtime.Serialization.EnumMember(Value = "Linux")]
		Linux = 1,

		[System.Runtime.Serialization.EnumMember(Value = "OsX")]
		OsX = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public enum NewJanitraBotOs
	{
		[System.Runtime.Serialization.EnumMember(Value = "Windows")]
		Windows = 0,

		[System.Runtime.Serialization.EnumMember(Value = "Linux")]
		Linux = 1,

		[System.Runtime.Serialization.EnumMember(Value = "OsX")]
		OsX = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public enum JsonTestRomRomType
	{
		[System.Runtime.Serialization.EnumMember(Value = "HardwareTest")]
		HardwareTest = 0,

		[System.Runtime.Serialization.EnumMember(Value = "HomebrewApp")]
		HomebrewApp = 1,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public enum JsonTestResultTestResultType
	{
		[System.Runtime.Serialization.EnumMember(Value = "Crash")]
		Crash = 0,

		[System.Runtime.Serialization.EnumMember(Value = "Completed")]
		Completed = 1,

		[System.Runtime.Serialization.EnumMember(Value = "Timeout")]
		Timeout = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.4.10.0")]
	public enum NewTestResultTestResultType
	{
		[System.Runtime.Serialization.EnumMember(Value = "Crash")]
		Crash = 0,

		[System.Runtime.Serialization.EnumMember(Value = "Completed")]
		Completed = 1,

		[System.Runtime.Serialization.EnumMember(Value = "Timeout")]
		Timeout = 2,

	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "11.5.1.0")]
	public class SwaggerException : System.Exception
	{
		public string StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

		public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
			: base(message, innerException)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
		}

		public override string ToString()
		{
			return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
		}
	}

	[System.CodeDom.Compiler.GeneratedCode("NSwag", "11.5.1.0")]
	public class SwaggerException<TResult> : SwaggerException
	{
		public TResult Result { get; private set; }

		public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
			: base(message, statusCode, response, headers, innerException)
		{
			Result = result;
		}
	}

}